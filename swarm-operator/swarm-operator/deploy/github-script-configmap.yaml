apiVersion: v1
kind: ConfigMap
metadata:
  name: github-task-script
  namespace: default
data:
  task.sh: |
    #!/bin/sh
    set -e
    echo "üöÄ Starting GitHub automation task..."
    
    # Check if we have a real token
    if [ "$GITHUB_TOKEN" = "ghp_PLACEHOLDER_TOKEN" ]; then
        echo "‚ö†Ô∏è  WARNING: Using placeholder GitHub token"
        echo "The task will simulate creating a repository"
        echo "To actually create a repo, update the github-credentials secret with a real token"
        echo ""
        echo "Simulating repository creation for user: $GITHUB_USERNAME"
        sleep 5
        echo "‚úÖ Simulation completed!"
        exit 0
    fi
    
    # Install required tools
    echo "üì¶ Installing required tools..."
    apk add --no-cache curl jq go git
    
    # Configure git
    git config --global user.name "Swarm Operator"
    git config --global user.email "$GITHUB_EMAIL"
    git config --global init.defaultBranch main
    
    # Create Go hello world app
    echo "üìù Creating Go hello world application..."
    mkdir -p /workspace/hello-swarm
    cd /workspace/hello-swarm
    
    # Create go.mod
    cat > go.mod << EOF
    module github.com/$GITHUB_USERNAME/hello-swarm
    
    go 1.21
    EOF
    
    # Create main.go
    cat > main.go << 'GOEOF'
    package main
    
    import (
        "fmt"
        "time"
    )
    
    func main() {
        fmt.Println("üêù Hello from Claude Flow Swarm!")
        fmt.Printf("Generated at: %s\n", time.Now().Format(time.RFC3339))
        fmt.Println("This app was created by an AI swarm running in Kubernetes!")
        fmt.Println()
        fmt.Println("The swarm operator orchestrated this entire process:")
        fmt.Println("- Created a Kubernetes Job")
        fmt.Println("- Generated Go code")
        fmt.Println("- Created a GitHub repository")
        fmt.Println("- Pushed the code automatically")
    }
    GOEOF
    
    # Create README
    cat > README.md << 'MDEOF'
    # Hello Swarm üêù
    
    This repository was automatically created and deployed by the Claude Flow Swarm Operator running in Kubernetes.
    
    ## About
    
    This is a simple Go application that demonstrates the power of AI-driven automation in cloud-native environments.
    
    ### Features
    - Automated repository creation via GitHub API
    - Code generation by AI swarm agents
    - GitOps workflow integration
    - Kubernetes-native operation
    
    ### Running the app
    
    ```bash
    go run main.go
    ```
    
    ### Architecture
    
    ```
    Kubernetes Cluster
    ‚îú‚îÄ‚îÄ Swarm Operator (Controller)
    ‚îÇ   ‚îî‚îÄ‚îÄ Watches SwarmTask CRDs
    ‚îú‚îÄ‚îÄ SwarmTask Resource
    ‚îÇ   ‚îî‚îÄ‚îÄ Triggers Job Creation
    ‚îî‚îÄ‚îÄ Kubernetes Job
        ‚îî‚îÄ‚îÄ Executes GitHub Automation
    ```
    
    ---
    *Generated by Claude Flow Swarm Operator v0.2.0*
    MDEOF
    
    # Create .gitignore
    cat > .gitignore << 'GIEOF'
    # Binaries
    *.exe
    *.dll
    *.so
    *.dylib
    hello-swarm
    
    # Test files
    *.test
    *.out
    
    # Go workspace
    go.work
    go.work.sum
    
    # IDE
    .vscode/
    .idea/
    *.swp
    *.swo
    GIEOF
    
    # Test the Go app
    echo "üß™ Testing Go application..."
    go run main.go
    
    # Initialize git repo
    git init
    git add .
    git commit -m "Initial commit: Hello World Go app created by Swarm Operator
    
    This repository was automatically generated by the Claude Flow Swarm Operator
    running in a Kubernetes cluster. The operator processed a SwarmTask resource
    and created a Kubernetes Job to execute this automation."
    
    # Create GitHub repository using API
    echo "üîß Creating GitHub repository..."
    REPO_NAME="hello-swarm-$(date +%s)"
    
    CREATE_REPO_RESPONSE=$(curl -s -X POST \
      -H "Authorization: token $GITHUB_TOKEN" \
      -H "Accept: application/vnd.github.v3+json" \
      https://api.github.com/user/repos \
      -d "{
        \"name\": \"$REPO_NAME\",
        \"description\": \"üêù Hello World app created by Claude Flow Swarm Operator running in Kubernetes\",
        \"homepage\": \"https://github.com/claude-flow/swarm-operator\",
        \"private\": false,
        \"has_issues\": true,
        \"has_projects\": false,
        \"has_wiki\": false,
        \"auto_init\": false
      }")
    
    # Check if repo was created successfully
    if echo "$CREATE_REPO_RESPONSE" | jq -e '.id' > /dev/null 2>&1; then
        echo "‚úÖ Repository created successfully!"
        REPO_URL=$(echo "$CREATE_REPO_RESPONSE" | jq -r '.clone_url')
        REPO_HTML_URL=$(echo "$CREATE_REPO_RESPONSE" | jq -r '.html_url')
        echo "Repository URL: $REPO_HTML_URL"
        
        # Add remote and push
        git remote add origin "$REPO_URL"
        
        # Replace https:// with token auth for push
        REPO_URL_WITH_TOKEN=$(echo "$REPO_URL" | sed "s|https://|https://$GITHUB_TOKEN@|")
        git remote set-url origin "$REPO_URL_WITH_TOKEN"
        
        # Push to GitHub
        echo "üì§ Pushing code to GitHub..."
        git push -u origin main
        
        echo "‚úÖ Code pushed successfully!"
        echo ""
        echo "üéâ Task completed successfully!"
        echo "üìç Repository: $REPO_HTML_URL"
        echo "üì¶ Clone with: git clone $REPO_URL"
    else
        echo "‚ùå Failed to create repository"
        echo "Response: $CREATE_REPO_RESPONSE"
        exit 1
    fi